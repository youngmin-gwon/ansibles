---
- name: Set OS-specific variables
  ansible.builtin.set_fact:
    docker_host_env: "{{ os_config[ansible_system].docker_host_env }}"
    plex_directory: "{{ os_config[ansible_system].plex_directory }}"
    become_enabled: "{{ os_config[ansible_system].become_enabled }}"
  vars:
    os_config:
      Darwin:
        docker_host_env: "unix:///Users/{{ ansible_user_id }}/.colima/default/docker.sock"
        plex_directory: "{{ ansible_user_dir }}/Library/Application Support/Plex Media Server"
        become_enabled: false
      Linux:
        docker_host_env: "unix:///var/run/docker.sock"
        plex_directory: "/var/lib/plexmediaserver"
        become_enabled: true
  tags: unix

- name: Ensure Docker exists
  ansible.builtin.include_role:
    name: docker
  tags: unix

- name: Ensure Plex directories exists
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ plex_directory }}"
    - "{{ plex_directory }}/config"
    - "{{ plex_directory }}/transcode"
    - "{{ plex_directory }}/media"
    - "{{ plex_directory }}/monitor"
    - "{{ plex_directory }}/monitor/config"
    - "{{ plex_directory }}/monitor/logs"
  become: "{{ become_enabled }}"
  tags: unix

- name: Ensure Plex Docker container is running and configured
  community.docker.docker_container:
    name: plex # Sets the Docker container name
    image: plexinc/pms-docker # Specifies the Docker image to pull and run
    state: absent # Ensures the container is in a 'started' state (creates if not exists)
    restart_policy: unless-stopped # Container restarts automatically unless explicitly stopped
    ports:
      - "32400:32400/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    volumes:
      # Mounts the host data directory to /data inside the container for persistent storage
      - "{{ plex_directory }}/config:/config"
      - "{{ plex_directory }}/transcode:/transcode"
      - "{{ plex_directory }}/media:/data"
    env: # Sets environment variables inside the container, as per your docker-compose
      TZ: "{{ timezone }}"
      PLEX_CLAIM: "{{ plex_claim_token }}"
      ADVERTISE_IP: "http://{{ ansible_host }}:32400/"
  become: "{{ become_enabled }}" # Apply sudo based on OS for Docker operations
  environment:
    # Conditionally set DOCKER_HOST for macOS (Colima).
    # This environment variable will only be effective on macOS hosts when become_enabled_for_os is true.
    # On Linux, this variable is generally not needed as Docker client defaults to /var/run/docker.sock.
    DOCKER_HOST: "{{ docker_host_env }}" # Use 'omit' to not set it on Linux
  tags: unix

- name: Ensure Plex Monitor Docker container is running and configured
  community.docker.docker_container:
    name: tautulli # Sets the Docker container name
    image: linuxserver/tautulli # Specifies the Docker image to pull and run
    state: absent # Ensures the container is in a 'started' state (creates if not exists)
    restart_policy: unless-stopped # Container restarts automatically unless explicitly stopped
    ports:
      - "681:8181"
    volumes:
      - "{{ plex_directory }}/monitor/config:/config"
      - "{{ plex_directory }}/monitor/logs:/logs:ro"
    env: # Sets environment variables inside the container, as per your docker-compose
      TZ: "{{ timezone }}"
      PUID: "${UID}"
      PGID: "$(id -g $USER)"
  become: "{{ become_enabled }}" # Apply sudo based on OS for Docker operations
  environment:
    # Conditionally set DOCKER_HOST for macOS (Colima).
    # This environment variable will only be effective on macOS hosts when become_enabled_for_os is true.
    # On Linux, this variable is generally not needed as Docker client defaults to /var/run/docker.sock.
    DOCKER_HOST: "{{ docker_host_env }}" # Use 'omit' to not set it on Linux
  tags: unix
