---
- name: Check if Xcode is installed
  ansible.builtin.stat:
    path: "{{ os_settings_xcode_path }}"
  become: false
  register: xcode_installed
  tags: macos

- name: Check if Xcode Command Line Tools are installed
  ansible.builtin.command: xcode-select --print-path
  become: false
  register: xcode_clt_check
  changed_when: false
  ignore_errors: true
  tags: macos

- name: Install Xcode Command Line Tools if not installed
  ansible.builtin.command: xcode-select --install
  become: false
  when: xcode_clt_check.rc != 0
  tags: macos

- name: Install Xcode via the App Store (if Xcode is not installed)
  ansible.builtin.command: softwareupdate --install --all
  become: false
  when: not xcode_installed.stat.exists
  register: xcode_install_output
  tags: macos

- name: Wait for Xcode installation to complete
  ansible.builtin.pause:
    minutes: 10
  become: false
  when: not xcode_installed.stat.exists
  tags: macos

- name: Get list of available simulators and extract the latest version
  ansible.builtin.shell: |
    xcrun simctl list runtimes | grep "iOS" | grep -o 'com.apple.CoreSimulator.SimRuntime.iOS-[0-9.]*' | sort -rV | head -n 1
  become: false
  register: latest_simulator
  when: os_settings_simulator_version == "latest"
  changed_when: false
  tags: macos

- name: Set the latest simulator version dynamically
  ansible.builtin.set_fact:
    os_settings_simulator_version: "{{ latest_simulator.stdout | regex_replace('com.apple.CoreSimulator.SimRuntime.iOS-', '') }}"
  become: false
  when: os_settings_simulator_version == "latest"
  tags: macos

- name: Check if the desired simulator version is installed
  ansible.builtin.shell: |
    xcrun simctl list runtimes | grep -i "com.apple.CoreSimulator.SimRuntime.iOS-{{ os_settings_simulator_version }}"
  register: simulator_installed
  changed_when: false
  ignore_errors: true
  tags: macos

- name: Install the latest simulator if not present
  ansible.builtin.command: >
    xcrun simctl runtime install
    com.apple.CoreSimulator.SimRuntime.iOS-{{ os_settings_simulator_version }}
  become: false
  when: simulator_installed.rc != 0
  tags: macos

- name: Ensure the simulator is installed
  ansible.builtin.shell: xcrun simctl list runtimes | grep -i "com.apple.CoreSimulator.SimRuntime.iOS-{{ os_settings_simulator_version }}"
  become: false
  register: final_check
  changed_when: false
  failed_when: final_check.rc != 0
  tags: macos

- name: Set Simulator settings
  community.general.osx_defaults:
    domain: com.apple.iphonesimulator
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Show single touches
    - { key: "ShowSingleTouches", type: "bool", value: "true" }
    # Enable the Internal Debug Menu
    - { key: "IncludeInternalDebugMenu", type: "bool", value: "true" }
    # Set slow animations for debugging (optional)
    - { key: "SlowAnimations", type: "bool", value: "true" }
    # Highlight clipped views (optional)
    - { key: "HighlightClippedViews", type: "bool", value: "true" }
    # Show device bezels (optional)
    - { key: "ShowDeviceBezels", type: "bool", value: "true" }
    # Show status bar touches (optional)
    - { key: "ShowStatusBarTouches", type: "bool", value: "true" }
    # Show taps in simulator screen recordings
    - { key: "ShowTouchesInScreenRecording", type: "bool", value: "true" }
    # Show FPS in simulator for performance monitoring
    - { key: "ShowFPS", type: "bool", value: "true" }
    # Set simulator to always appear on top of other windows
    - { key: "AlwaysOnTop", type: "bool", value: "true" }
    # Set simulator to always appear on top of other windows
    - { key: "AXInspectorEnabled", type: "bool", value: "true" }
  become: false
  tags: macos
