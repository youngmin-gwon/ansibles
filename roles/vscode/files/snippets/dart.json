{
	"Part statement": {
		"prefix": "ptj",
		"body": [
			"part '${TM_FILENAME_BASE}.g.dart';"
		],
		"description": "Creates a filled-in part statement"
	},
	"Part 'Freezed' statement": {
		"prefix": "ptf",
		"body": [
			"part '${TM_FILENAME_BASE}.freezed.dart';"
		],
		"description": "Creates a filled-in freezed part statement"
	},
	"Freezed Data Class": {
		"prefix": "fdataclass",
		"body": [
			"@freezed",
			"class ${1:DataClass} with _$${1:DataClass} {",
			"  const ${1:DataClass}._();",
			"  const factory ${1:DataClass}(${2}) = _${1:DataClass};",
			"}"
		],
		"description": "Freezed Data Class"
	},
	"Freezed Union": {
		"prefix": "funion",
		"body": [
			"@freezed",
			"class ${1:Union} with _$${1:Union} {",
			"  const ${1:Union}._();",
			"  const factory ${1:Union}.${2}(${4}) = ${3};",
			"}"
		],
		"description": "Freezed Union"
	},
	"Freezed Union Case": {
		"prefix": "funioncase",
		"body": [
			"const factory ${1:Union}.${2}(${4}) = ${3};"
		],
		"description": "Freezed Union Case"
	},
	"From JSON": {
		"prefix": "fromJson",
		"body": [
			"factory ${1}.fromJson(Map<String, dynamic> json) => _$${1}FromJson(json);"
		],
		"description": "From JSON"
	},
	"Class With Filename": {
		"prefix": "classfile",
		"body": [
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {${1}}"
		],
		"description": "Creates class which shares the name of the file"
	},
	"Basic test scaffolding": {
		"prefix": "t_scaffold",
		"body": [
			"import 'package:flutter_test/flutter_test.dart';",
			"",
			"void main() {",
			"  late ${1:ClassName} sut;",
			"",
			"  setUp(() {",
			"    sut = ${1:ClassName}();",
			"  });",
			"",
			"  group('', () {});",
			"}",
			""
		],
		"description": "Basic test scaffolding"
	},
	"Test following the Arrange-Act-Assert pattern": {
		"prefix": "aaaTest",
		"body": [
			"test(",
			"  '$1',",
			"  () async {",
			"    $2",
			"  },",
			");"
		],
		"description": "Test following the Arrange-Act-Assert pattern"
	},
	"Flutter widget test boilerplate": {
		"prefix": "wTest",
		"body": [
			"testWidgets(",
			"  '$1',",
			"  (WidgetTester tester) async {$2},",
			");"
		],
		"description": "Flutter widget test boilerplate"
	}
}