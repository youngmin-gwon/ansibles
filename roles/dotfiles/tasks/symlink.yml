---
- name: Find all subdirectories inside the root directory
  ansible.builtin.find:
    paths: "{{ item }}"
    recurse: no
    file_type: directory
  register: subdirs_results
  with_items: "{{ file_directories }}"

- name: Combine all subdirectories into a single list
  ansible.builtin.set_fact:
    subdirectories: "{{ subdirs_results.results | map(attribute='files') | flatten }}"
  loop: "{{ subdirs_results.results }}"
  loop_control:
    loop_var: result
  when: subdirs_results.results | length > 0

- name: Check if links.prop exists in the subdirectories
  ansible.builtin.stat:
    path: "{{ item.path }}/links.prop"
  register: stat_results
  with_items: "{{ subdirectories }}"

- name: Create list of directories containing links.prop with full file path
  ansible.builtin.set_fact:
    directories_with_links_prop: "{{ stat_results.results | selectattr('stat.exists') | map(attribute='item.path') | map('regex_replace', '$', '/links.prop') | list }}"

- name: Read the links.prop file if it exists
  ansible.builtin.command: cat "{{ item }}"
  register: links_content
  changed_when: false
  when: (directories_with_links_prop | default([])) | length > 0
  with_items: "{{ directories_with_links_prop }}"

- name: Initialize an empty list to hold all links
  ansible.builtin.set_fact:
    links_lines: []
  when: (directories_with_links_prop | default([])) | length > 0

- name: Ensure links_lines is a list of maps
  ansible.builtin.set_fact:
    links_lines: "{{ links_lines + [{'file': parent_dir, 'lines': content.stdout_lines | default([content.stdout])}] }}"
  when: (directories_with_links_prop | default([])) | length > 0
  vars:
    parent_dir: "{{ content.item.split('/files/')[0] + '/files/' + content.item.split('/files/')[1].split('/')[0] }}"
  loop: "{{ links_content.results }}"
  loop_control:
    loop_var: content

- name: Create symlinks for each entry in links.prop
  ansible.builtin.file:
    src: "{{ line.split('=')[0] | regex_replace('\\$DOTFILES', dotfiles_path) }}"
    dest: "{{ line.split('=')[1] | regex_replace('\\$HOME', lookup('env', 'HOME')) }}"
    state: link
    force: yes
    follow: false
  loop: "{{ links_lines | map(attribute='lines') | flatten(levels=1) }}"
  loop_control:
    loop_var: line
  vars:
    dotfiles_path: "{{ links_lines[0].file }}"
