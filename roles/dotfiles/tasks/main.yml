---
- name: Find all subdirectories inside the root directory
  ansible.builtin.find:
    paths: "{{ file_directory }}"
    recurse: no
    file_type: directory
  register: subdirectories

- name: Check if links.prop exists in the subdirectories
  ansible.builtin.stat:
    path: "{{ item.path }}/links.prop"
  register: stat_results
  with_items: "{{ subdirectories.files }}"


- name: Create list of directories containing links.prop with full file path
  ansible.builtin.set_fact:
    directories_with_links_prop: "{{ stat_results.results | selectattr('stat.exists') | map(attribute='item.path') | map('regex_replace', '$', '/links.prop') | list }}"

- name: Read the links.prop file if it exists
  ansible.builtin.command: cat "{{ item }}"
  register: links_content
  changed_when: false
  when: (directories_with_links_prop | default([])) | length > 0
  with_items: "{{ directories_with_links_prop }}"

- name: Initialize an empty list to hold all links
  ansible.builtin.set_fact:
    links_lines: []
  when: (directories_with_links_prop | default([])) | length > 0

- name: Ensure links_lines is a list (even if single line)
  ansible.builtin.set_fact:
    links_lines: "{{ links_lines + (content.stdout_lines | default([content.stdout])) }}"
  when: (directories_with_links_prop | default([])) | length > 0
  loop: "{{ links_content.results }}"
  loop_control:
    loop_var: content

- name: Create symlinks for each entry in links.prop
  file:
    src: "{{ item.split('=')[0] | regex_replace('\\$DOTFILES', file_directory) }}"
    dest: "{{ item.split('=')[1] | regex_replace('\\$HOME', lookup('env', 'HOME')) }}"
    state: link
    force: yes
    follow: false
  with_items: "{{ links_lines }}"
  when: (links_lines | default([]) | length > 0)
