---

- name: Set OS-specific variables
  ansible.builtin.set_fact:
    docker_host_env: "{{ os_config[ansible_system].docker_host_env }}"
    vaultwarden_data_directory: "{{ os_config[ansible_system].vaultwarden_data_directory }}"
    become_enabled: "{{ os_config[ansible_system].become_enabled }}"
  vars:
    os_config:
      Darwin:
        docker_host_env: "unix:///Users/{{ ansible_user_id }}/.colima/default/docker.sock"
        vaultwarden_data_directory: "{{ ansible_user_dir }}/Library/Application Support/Vaultwarden"
        become_enabled: false
      Linux:
        docker_host_env: "unix:///var/run/docker.sock"
        vaultwarden_data_directory: "/var/lib/vaultwarden"
        become_enabled: true
  tags: unix

- name: Ensure Docker exists
  ansible.builtin.include_role:
    name: docker
  tags: unix

- name: Ensure Vaultwarden directories exists
  ansible.builtin.file:
    path: "{{ vaultwarden_data_directory }}" # Iterates through the list of paths
    state: directory
    mode: '0755'
  become: "{{ become_enabled }}"
  tags: unix

- name: Ensure Vaultwarden Docker container is running and configured
  community.docker.docker_container:
    name: vaultwarden # Sets the Docker container name
    image: vaultwarden/server:latest # Specifies the Docker image to pull and run
    state: started # Ensures the container is in a 'started' state (creates if not exists)
    restart_policy: unless-stopped # Container restarts automatically unless explicitly stopped
    ports:
      - "18080:8080" # Maps host port 18080 to container port 8080 (as per your docker-compose)
    volumes:
      # Mounts the host data directory to /data inside the container for persistent storage
      - "{{ vaultwarden_data_directory }}:/data"
    env: # Sets environment variables inside the container, as per your docker-compose
      DOMAIN: "https://vw.domain.tld"
      ROCKET_PORT: "8080" # Note: Environment variables are usually strings, even if they are numbers
      SIGNUPS_ALLOWED: "false"
      ADMIN_TOKEN: "{{ vaultwarden_token }}" # No '=' needed here, it's a key-value pair
  become: "{{ become_enabled }}" # Apply sudo based on OS for Docker operations
  environment:
    # Conditionally set DOCKER_HOST for macOS (Colima).
    # This environment variable will only be effective on macOS hosts when become_enabled_for_os is true.
    # On Linux, this variable is generally not needed as Docker client defaults to /var/run/docker.sock.
    DOCKER_HOST: "{{ docker_host_env }}" # Use 'omit' to not set it on Linux
  tags: unix
